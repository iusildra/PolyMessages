@startuml sequence

skinparam responseMessageBelowArrow true

actor Bob 
participant "Bob's client" as Client
participant Server

===Connexion (asynchrone entre client)==
autonumber "<b>[00]"
Bob -> Client++: start
activate Server
Client -> Server: ask for connection
Server --> Client: connection confirmation\n + getUsername()
Client --> Bob: ask for username
Bob -> Client: enter username
Client -> Server: sendUsername()
alt username available
Server --> Client: send login confirmation
Client --> Bob: ready
else
Server --> Client: reject login
Client --x Bob: terminate
destroy Client
end
deactivate Server

===Ã‰change de message (asynchrone entre client)==

activate Server
par
autonumber 0-0
Bob -> Client++ : write message
activate Server
Client -> Server: transmit message's size
Client -> Server: transmit message
else
autonumber 1-0
Server --> Client: send message's size
Server --> Client: send message
Client --> Bob: receive message's size
Client --> Bob--: receive message
end
deactivate Server
===Server shutdown==
autonumber "<b>[00]"
Server --> Client: send disconnection\nsignal
activate Server
activate Client
Client --> Bob: display disconnection
destroy Client
Server -> Server: save rooms\nin a file
Server -[hidden]-> Client
destroy Server
@enduml

@startuml commands
skinparam responseMessageBelowArrow true

actor Bob 
participant "Bob's client" as Client
participant Server
===Commandes==
==/mp <username>==
Bob -> Client++: write message to\n <username>
activate Server
Client -> Server: transmit message
Server -> Server: dispatch
alt <username> exists
Server -> Client: confirmation
Client -> Bob: print written\nmessage
else
Server -> Client: error
Client -> Bob--: "this client doesn't\nexist"
end
deactivate Server
==/help==
Bob -> Client++: write "/help"
activate Server
Client -> Server: transmit message
Server -> Server: dispatch
Server -> Client: return the list\nof commands
Client -> Bob--: print the list\nof commands
deactivate Server
==/DC or ^C==
Bob -> Client++: write "/DC"
activate Server
Client -> Server: transmit message
Server -> Server: catch\nrequest
Server --> Client: deconnect client
Client --> Bob--: confirm deconnection
destroy Client
deactivate Server
@enduml

@startuml rooms
actor Bob
participant "Bob's client" as Client
participant "Server" as Server
==/creer==
Bob -> Client++: write "/creer"
activate Server
Client --> Bob: ask for room name
Bob -> Client: enter name
Client --> Bob: ask for room description
Bob -> Client: enter description
Client -> Server: send information
Server -> Server: add the client\nto the newly\ncreated room
Client -[hidden]-> Bob
deactivate Client
deactivate Server
==/quitter==
Bob -> Client++: write "/quitter"
activate Server
Client -> Server: transmit
Server -> Server: remove Bob\nfrom the room
Client -[hidden]-> Bob--
deactivate Server
==/connect==
Bob -> Client++: write "/connect"
activate Server
Client -> Bob: ask for the id of the room
Bob -> Client: choose
Client -> Server: ask for change
alt room exists
Server -> Server: connect bob to\nthe requested room
else
Server --> Client: return an error
Client --> Bob--: display the error
end
deactivate Server
==/delete==
Bob -> Client++: write "/delete"
activate Server
Client -> Bob: ask for the id of the room
Bob -> Client: choose
Client -> Server: ask for deletion
alt room exists
Server -> Server: delete the room
else
Server --> Client: return an error
Client --> Bob--: display the error
end
deactivate Server
@enduml

@startuml fileManagement
actor Bob
participant "Bob's client" as Client
participant "Bob's client subprocess" as Client2
participant "Server subprocess" as Server
===File management==
==File sending==
Bob -> Client++: write '/send'
activate Server
Client -> Client2++: create subprocess
Client2 --> Bob: print the list\nof available\nfiles
Bob -> Client2: choose file
Client2 -> Server: send '/send'
Client2 -> Server: send filename
loop
alt content not null
Client2 -> Server: send content
Server -> Server: write content
else
break
Client2 -> Server: send '/end'
end
end
end
destroy Client2
deactivate Client
deactivate Client2
deactivate Server
==File receving==
Bob -> Client++: write '/ls'
activate Server
Client -> Client2++: create subprocess
Client2 -> Server: ask for files
Server --> Client2: return available files
Client2 --> Bob: print the list\nof available\nfiles
Bob -> Client: write '/recv'
Bob -> Client2: choose file
Client2 -> Server: send '/recv'
Client2 -> Server: send filename
loop
alt content not null
Client2 <- Server: send content
Client2 -> Client2: write content
else
break
Client2 <- Server: send '/end'
end
end
end
destroy Client2
@enduml