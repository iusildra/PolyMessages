@startuml sequence

skinparam responseMessageBelowArrow true

actor Bob 
participant "Bob's client" as Client
participant Server

===Connexion (asynchrone entre client)==
autonumber "<b>[00]"
Bob -> Client++: start
activate Server
Client -> Server: ask for connection
Server --> Client: connection confirmation\n + getUsername()
Client --> Bob: ask for username
Bob -> Client: enter username
Client -> Server: sendUsername()
alt username available
Server --> Client: send login confirmation
Client --> Bob: ready
else
Server --> Client: reject login
Client --x Bob: terminate
destroy Client
end
deactivate Server

===Ã‰change de message (asynchrone entre client)==

activate Server
par
autonumber 0-0
Bob -> Client++ : write message
activate Server
Client -> Server: transmit message's size
Client -> Server: transmit message
else
autonumber 1-0
Server --> Client: send message's size
Server --> Client: send message
Client --> Bob: receive message's size
Client --> Bob--: receive message
end
deactivate Server
@enduml
@startuml commands
skinparam responseMessageBelowArrow true

actor Bob 
participant "Bob's client" as Client
participant Server
===Commandes==
==/mp <username>==
Bob -> Client++: write message to\n <username>
activate Server
Client -> Server: transmit message
Server -> Server: dispatch
alt <username> exists
Server -> Client: confirmation
Client -> Bob: print written\nmessage
else
Server -> Client: error
Client -> Bob--: "this client doesn't\nexist"
end
deactivate Server
==/help==
Bob -> Client++: write "/help"
activate Server
Client -> Server: transmit message
Server -> Server: dispatch
Server -> Client: return the list\nof commands
Client -> Bob--: print the list\nof commands
deactivate Server
==/DC or ^C==
Bob -> Client++: write "/DC"
activate Server
Client -> Server: transmit message
Server -> Server: catch\nrequest
Server --> Client: deconnect client
Client --> Bob--: confirm deconnection
destroy Client
deactivate Server
@enduml